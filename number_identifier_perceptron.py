# -*- coding: utf-8 -*-
"""Number_Identifier_Perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rHVixubk7VDhT0uxghxzy3kGuD-7bqY-
"""

from tensorflow.keras.datasets import mnist
import tensorflow as tf
from google.colab.patches import cv2_imshow #for showing the images if needed
import numpy as np
import cv2

# download the mnist dataset first
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# make the filter/mask for 0 and 1 from the dataset
train_mask = (y_train == 0) | (y_train == 1) # | means or
test_mask = (y_test == 0) | (y_test == 1)

X_train, y_train = X_train[train_mask], y_train[train_mask] #filter them from the dataset now
X_test, y_test = X_test[test_mask], y_test[test_mask]

#flatten images as perceptron only takes 1D input
X_train = X_train.reshape(X_train.shape[0], 28*28) #28*28 is for a 784 vector of images
X_test  = X_test.reshape(X_test.shape[0], 28*28)

#normalise
X_train = X_train / 255
X_test = X_test / 255

X_train.shape

class Perceptron:
    def __init__(self, n_features, lr=0.01, n_epochs=10):
        self.w = np.zeros(n_features) #weights
        self.b = 0 #bias
        self.lr = lr
        self.n_epochs = n_epochs

    def step(self, z):
        return np.where(z >= 0, 1, 0)

    def fit(self, X, y):
        for _ in range(self.n_epochs):
            for xi, target in zip(X, y):
                z = np.dot(xi, self.w) + self.b
                y_pred = self.step(z)
                update = self.lr * (target - y_pred)
                self.w += update * xi
                self.b += update

    def predict(self, X):
        return self.step(np.dot(X, self.w) + self.b)

#train model
model = Perceptron(n_features=X_train.shape[1], lr=0.01, n_epochs=10)
model.fit(X_train, y_train)

#evaluation
y_hat = model.predict(X_test)
acc = np.mean(y_hat == y_test)
print(f"Accuracy: {acc:.4f}")

img = cv2.imread("img.png", cv2.IMREAD_GRAYSCALE).flatten() / 255
img = img.reshape(1, -1)
y_hat_img = model.predict(img)
print("Prediction for this image:", y_hat_img[0])